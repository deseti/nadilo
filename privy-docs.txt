# Authorization signatures
Source: 
https://docs.privy.io/api-reference/authorization-signatures

Securing Privy API requests with authorization signatures

## Overview

[Owners](/controls/overview) provide authorization signatures to secure Privy API requests. These signatures are generated using your app's private key and are used to authenticate requests to Privy's API.

## Generating authorization signatures

To generate an authorization signature, you'll need:

1. Your app's private key
2. The request body (if any)
3. The request method (GET, POST, etc.)
4. The request URL
5. A timestamp

The signature is generated by creating an HMAC-SHA256 hash of the concatenated string:

```
{method}{url}{timestamp}{body}
```

Where:
- `method` is the HTTP method (e.g., "GET", "POST")
- `url` is the full URL of the request
- `timestamp` is the current Unix timestamp in seconds
- `body` is the request body (empty string for GET requests)

## Example

Here's an example of generating an authorization signature in JavaScript:

```javascript
import crypto from 'crypto';

function generateAuthSignature(method, url, body, timestamp, privateKey) {
  const message = `${method}${url}${timestamp}${body}`;
  return crypto.createHmac('sha256', privateKey).update(message).digest('hex');
}

const method = 'POST';
const url = 'https://auth.privy.io/api/v1/users';
const body = JSON.stringify({ email: 'user@example.com' });
const timestamp = Math.floor(Date.now() / 1000);
const privateKey = 'your-app-private-key';

const signature = generateAuthSignature(method, url, body, timestamp, privateKey);
```

## Making authenticated requests

Include the following headers in your API requests:

- `privy-app-id`: Your app ID
- `privy-timestamp`: The timestamp used to generate the signature
- `privy-signature`: The generated signature

```javascript
const headers = {
  'Content-Type': 'application/json',
  'privy-app-id': 'your-app-id',
  'privy-timestamp': timestamp.toString(),
  'privy-signature': signature,
};
```

# Wallets
Source: https://docs.privy.io/guide/react/wallets/usage

Using wallets in your React app

## Overview

Privy provides a simple way to interact with user wallets in your React app. You can use the `useWallets` hook to access the user's wallets and perform various operations.

## Getting user wallets

```javascript
import { useWallets } from '@privy-io/react-auth';

function MyComponent() {
  const { wallets } = useWallets();
  
  // wallets is an array of wallet objects
  console.log(wallets);
}
```

## Wallet object structure

Each wallet object contains:

```javascript
{
  address: '0x1234...', // The wallet address
  chainType: 'ethereum', // The chain type
  walletClient: WalletClient, // Viem wallet client
  walletClientType: 'privy', // The wallet client type
}
```

## Sending transactions

You can send transactions using the wallet client:

```javascript
import { useWallets } from '@privy-io/react-auth';

function SendTransaction() {
  const { wallets } = useWallets();
  
  const sendTransaction = async () => {
    if (wallets.length === 0) return;
    
    const wallet = wallets[0];
    const hash = await wallet.walletClient.sendTransaction({
      to: '0x...',
      value: parseEther('0.01'),
      data: '0x',
    });
    
    console.log('Transaction hash:', hash);
  };
  
  return <button onClick={sendTransaction}>Send Transaction</button>;
}
```

## Contract interactions

You can interact with smart contracts using viem:

```javascript
import { useWallets } from '@privy-io/react-auth';
import { createPublicClient, http } from 'viem';
import { mainnet } from 'viem/chains';

function ContractInteraction() {
  const { wallets } = useWallets();
  
  const interactWithContract = async () => {
    if (wallets.length === 0) return;
    
    const wallet = wallets[0];
    const publicClient = createPublicClient({
      chain: mainnet,
      transport: http(),
    });
    
    // Read from contract
    const result = await publicClient.readContract({
      address: '0x...',
      abi: contractAbi,
      functionName: 'balanceOf',
      args: [wallet.address],
    });
    
    // Write to contract
    const hash = await wallet.walletClient.writeContract({
      address: '0x...',
      abi: contractAbi,
      functionName: 'transfer',
      args: ['0x...', parseEther('1')],
    });
  };
}
```

# Authentication
Source: https://docs.privy.io/guide/react/authentication

Authentication with Privy

## Overview

Privy provides a simple authentication system that supports multiple login methods including email, phone, social logins, and wallet connections.

## Basic setup

```javascript
import { PrivyProvider, usePrivy } from '@privy-io/react-auth';

function App() {
  return (
    <PrivyProvider
      appId="your-app-id"
      config={{
        loginMethods: ['email', 'wallet'],
        appearance: {
          theme: 'light',
          accentColor: '#676FFF',
        },
      }}
    >
      <MyApp />
    </PrivyProvider>
  );
}

function MyApp() {
  const { ready, authenticated, user, login, logout } = usePrivy();
  
  if (!ready) return <div>Loading...</div>;
  
  return (
    <div>
      {authenticated ? (
        <div>
          <p>Welcome {user.email?.address}!</p>
          <button onClick={logout}>Logout</button>
        </div>
      ) : (
        <button onClick={login}>Login</button>
      )}
    </div>
  );
}
```

## User object

The user object contains information about the authenticated user:

```javascript
{
  id: 'user-id',
  email: {
    address: 'user@example.com',
    verified: true,
  },
  phone: {
    number: '+1234567890',
    verified: true,
  },
  wallet: {
    address: '0x1234...',
    chainType: 'ethereum',
  },
  createdAt: '2023-01-01T00:00:00.000Z',
}
```

## Login methods

You can configure which login methods to enable:

```javascript
<PrivyProvider
  appId="your-app-id"
  config={{
    loginMethods: [
      'email',
      'phone', 
      'wallet',
      'google',
      'twitter',
      'discord',
      'github',
    ],
  }}
>
```

## Custom login UI

You can create custom login flows:

```javascript
import { usePrivy } from '@privy-io/react-auth';

function CustomLogin() {
  const { loginWithEmail, loginWithWallet } = usePrivy();
  
  const handleEmailLogin = async () => {
    await loginWithEmail('user@example.com');
  };
  
  const handleWalletLogin = async () => {
    await loginWithWallet();
  };
  
  return (
    <div>
      <button onClick={handleEmailLogin}>Login with Email</button>
      <button onClick={handleWalletLogin}>Login with Wallet</button>
    </div>
  );
}
```